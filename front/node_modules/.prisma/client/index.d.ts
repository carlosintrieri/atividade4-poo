
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ClienteMenorConsumo
 * 
 */
export type ClienteMenorConsumo = $Result.DefaultSelection<Prisma.$ClienteMenorConsumoPayload>
/**
 * Model ClienteQtd
 * 
 */
export type ClienteQtd = $Result.DefaultSelection<Prisma.$ClienteQtdPayload>
/**
 * Model ClienteValor
 * 
 */
export type ClienteValor = $Result.DefaultSelection<Prisma.$ClienteValorPayload>
/**
 * Model ConsumoGenero
 * 
 */
export type ConsumoGenero = $Result.DefaultSelection<Prisma.$ConsumoGeneroPayload>
/**
 * Model ProdutoServicoConsumo
 * 
 */
export type ProdutoServicoConsumo = $Result.DefaultSelection<Prisma.$ProdutoServicoConsumoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Genero: {
  MASCULINO: 'MASCULINO',
  FEMININO: 'FEMININO'
};

export type Genero = (typeof Genero)[keyof typeof Genero]

}

export type Genero = $Enums.Genero

export const Genero: typeof $Enums.Genero

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ClienteMenorConsumos
 * const clienteMenorConsumos = await prisma.clienteMenorConsumo.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ClienteMenorConsumos
   * const clienteMenorConsumos = await prisma.clienteMenorConsumo.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.clienteMenorConsumo`: Exposes CRUD operations for the **ClienteMenorConsumo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteMenorConsumos
    * const clienteMenorConsumos = await prisma.clienteMenorConsumo.findMany()
    * ```
    */
  get clienteMenorConsumo(): Prisma.ClienteMenorConsumoDelegate<ExtArgs>;

  /**
   * `prisma.clienteQtd`: Exposes CRUD operations for the **ClienteQtd** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteQtds
    * const clienteQtds = await prisma.clienteQtd.findMany()
    * ```
    */
  get clienteQtd(): Prisma.ClienteQtdDelegate<ExtArgs>;

  /**
   * `prisma.clienteValor`: Exposes CRUD operations for the **ClienteValor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteValors
    * const clienteValors = await prisma.clienteValor.findMany()
    * ```
    */
  get clienteValor(): Prisma.ClienteValorDelegate<ExtArgs>;

  /**
   * `prisma.consumoGenero`: Exposes CRUD operations for the **ConsumoGenero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumoGeneros
    * const consumoGeneros = await prisma.consumoGenero.findMany()
    * ```
    */
  get consumoGenero(): Prisma.ConsumoGeneroDelegate<ExtArgs>;

  /**
   * `prisma.produtoServicoConsumo`: Exposes CRUD operations for the **ProdutoServicoConsumo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutoServicoConsumos
    * const produtoServicoConsumos = await prisma.produtoServicoConsumo.findMany()
    * ```
    */
  get produtoServicoConsumo(): Prisma.ProdutoServicoConsumoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.0
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ClienteMenorConsumo: 'ClienteMenorConsumo',
    ClienteQtd: 'ClienteQtd',
    ClienteValor: 'ClienteValor',
    ConsumoGenero: 'ConsumoGenero',
    ProdutoServicoConsumo: 'ProdutoServicoConsumo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "clienteMenorConsumo" | "clienteQtd" | "clienteValor" | "consumoGenero" | "produtoServicoConsumo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ClienteMenorConsumo: {
        payload: Prisma.$ClienteMenorConsumoPayload<ExtArgs>
        fields: Prisma.ClienteMenorConsumoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteMenorConsumoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteMenorConsumoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          findFirst: {
            args: Prisma.ClienteMenorConsumoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteMenorConsumoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          findMany: {
            args: Prisma.ClienteMenorConsumoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>[]
          }
          create: {
            args: Prisma.ClienteMenorConsumoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          createMany: {
            args: Prisma.ClienteMenorConsumoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteMenorConsumoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          update: {
            args: Prisma.ClienteMenorConsumoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          deleteMany: {
            args: Prisma.ClienteMenorConsumoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteMenorConsumoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteMenorConsumoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteMenorConsumoPayload>
          }
          aggregate: {
            args: Prisma.ClienteMenorConsumoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteMenorConsumo>
          }
          groupBy: {
            args: Prisma.ClienteMenorConsumoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteMenorConsumoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteMenorConsumoCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteMenorConsumoCountAggregateOutputType> | number
          }
        }
      }
      ClienteQtd: {
        payload: Prisma.$ClienteQtdPayload<ExtArgs>
        fields: Prisma.ClienteQtdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteQtdFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteQtdFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          findFirst: {
            args: Prisma.ClienteQtdFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteQtdFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          findMany: {
            args: Prisma.ClienteQtdFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>[]
          }
          create: {
            args: Prisma.ClienteQtdCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          createMany: {
            args: Prisma.ClienteQtdCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteQtdDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          update: {
            args: Prisma.ClienteQtdUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          deleteMany: {
            args: Prisma.ClienteQtdDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteQtdUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteQtdUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteQtdPayload>
          }
          aggregate: {
            args: Prisma.ClienteQtdAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteQtd>
          }
          groupBy: {
            args: Prisma.ClienteQtdGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteQtdGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteQtdCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteQtdCountAggregateOutputType> | number
          }
        }
      }
      ClienteValor: {
        payload: Prisma.$ClienteValorPayload<ExtArgs>
        fields: Prisma.ClienteValorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteValorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteValorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          findFirst: {
            args: Prisma.ClienteValorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteValorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          findMany: {
            args: Prisma.ClienteValorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>[]
          }
          create: {
            args: Prisma.ClienteValorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          createMany: {
            args: Prisma.ClienteValorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteValorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          update: {
            args: Prisma.ClienteValorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          deleteMany: {
            args: Prisma.ClienteValorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteValorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteValorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteValorPayload>
          }
          aggregate: {
            args: Prisma.ClienteValorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteValor>
          }
          groupBy: {
            args: Prisma.ClienteValorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteValorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteValorCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteValorCountAggregateOutputType> | number
          }
        }
      }
      ConsumoGenero: {
        payload: Prisma.$ConsumoGeneroPayload<ExtArgs>
        fields: Prisma.ConsumoGeneroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumoGeneroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumoGeneroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          findFirst: {
            args: Prisma.ConsumoGeneroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumoGeneroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          findMany: {
            args: Prisma.ConsumoGeneroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>[]
          }
          create: {
            args: Prisma.ConsumoGeneroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          createMany: {
            args: Prisma.ConsumoGeneroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConsumoGeneroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          update: {
            args: Prisma.ConsumoGeneroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          deleteMany: {
            args: Prisma.ConsumoGeneroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumoGeneroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsumoGeneroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumoGeneroPayload>
          }
          aggregate: {
            args: Prisma.ConsumoGeneroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumoGenero>
          }
          groupBy: {
            args: Prisma.ConsumoGeneroGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumoGeneroGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumoGeneroCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumoGeneroCountAggregateOutputType> | number
          }
        }
      }
      ProdutoServicoConsumo: {
        payload: Prisma.$ProdutoServicoConsumoPayload<ExtArgs>
        fields: Prisma.ProdutoServicoConsumoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoServicoConsumoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoServicoConsumoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoServicoConsumoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoServicoConsumoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          findMany: {
            args: Prisma.ProdutoServicoConsumoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>[]
          }
          create: {
            args: Prisma.ProdutoServicoConsumoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          createMany: {
            args: Prisma.ProdutoServicoConsumoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutoServicoConsumoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          update: {
            args: Prisma.ProdutoServicoConsumoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoServicoConsumoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoServicoConsumoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoServicoConsumoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoServicoConsumoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoServicoConsumoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutoServicoConsumo>
          }
          groupBy: {
            args: Prisma.ProdutoServicoConsumoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoServicoConsumoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoServicoConsumoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoServicoConsumoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ClienteMenorConsumo
   */

  export type AggregateClienteMenorConsumo = {
    _count: ClienteMenorConsumoCountAggregateOutputType | null
    _avg: ClienteMenorConsumoAvgAggregateOutputType | null
    _sum: ClienteMenorConsumoSumAggregateOutputType | null
    _min: ClienteMenorConsumoMinAggregateOutputType | null
    _max: ClienteMenorConsumoMaxAggregateOutputType | null
  }

  export type ClienteMenorConsumoAvgAggregateOutputType = {
    id: number | null
    valorConsumido: number | null
  }

  export type ClienteMenorConsumoSumAggregateOutputType = {
    id: number | null
    valorConsumido: number | null
  }

  export type ClienteMenorConsumoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    valorConsumido: number | null
  }

  export type ClienteMenorConsumoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    valorConsumido: number | null
  }

  export type ClienteMenorConsumoCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    telefone: number
    valorConsumido: number
    _all: number
  }


  export type ClienteMenorConsumoAvgAggregateInputType = {
    id?: true
    valorConsumido?: true
  }

  export type ClienteMenorConsumoSumAggregateInputType = {
    id?: true
    valorConsumido?: true
  }

  export type ClienteMenorConsumoMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
  }

  export type ClienteMenorConsumoMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
  }

  export type ClienteMenorConsumoCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
    _all?: true
  }

  export type ClienteMenorConsumoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteMenorConsumo to aggregate.
     */
    where?: ClienteMenorConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteMenorConsumos to fetch.
     */
    orderBy?: ClienteMenorConsumoOrderByWithRelationInput | ClienteMenorConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteMenorConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteMenorConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteMenorConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteMenorConsumos
    **/
    _count?: true | ClienteMenorConsumoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteMenorConsumoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteMenorConsumoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMenorConsumoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMenorConsumoMaxAggregateInputType
  }

  export type GetClienteMenorConsumoAggregateType<T extends ClienteMenorConsumoAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteMenorConsumo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteMenorConsumo[P]>
      : GetScalarType<T[P], AggregateClienteMenorConsumo[P]>
  }




  export type ClienteMenorConsumoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteMenorConsumoWhereInput
    orderBy?: ClienteMenorConsumoOrderByWithAggregationInput | ClienteMenorConsumoOrderByWithAggregationInput[]
    by: ClienteMenorConsumoScalarFieldEnum[] | ClienteMenorConsumoScalarFieldEnum
    having?: ClienteMenorConsumoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteMenorConsumoCountAggregateInputType | true
    _avg?: ClienteMenorConsumoAvgAggregateInputType
    _sum?: ClienteMenorConsumoSumAggregateInputType
    _min?: ClienteMenorConsumoMinAggregateInputType
    _max?: ClienteMenorConsumoMaxAggregateInputType
  }

  export type ClienteMenorConsumoGroupByOutputType = {
    id: number
    nome: string
    cpf: string
    telefone: string | null
    valorConsumido: number
    _count: ClienteMenorConsumoCountAggregateOutputType | null
    _avg: ClienteMenorConsumoAvgAggregateOutputType | null
    _sum: ClienteMenorConsumoSumAggregateOutputType | null
    _min: ClienteMenorConsumoMinAggregateOutputType | null
    _max: ClienteMenorConsumoMaxAggregateOutputType | null
  }

  type GetClienteMenorConsumoGroupByPayload<T extends ClienteMenorConsumoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteMenorConsumoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteMenorConsumoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteMenorConsumoGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteMenorConsumoGroupByOutputType[P]>
        }
      >
    >


  export type ClienteMenorConsumoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    valorConsumido?: boolean
  }, ExtArgs["result"]["clienteMenorConsumo"]>


  export type ClienteMenorConsumoSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    valorConsumido?: boolean
  }


  export type $ClienteMenorConsumoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteMenorConsumo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cpf: string
      telefone: string | null
      valorConsumido: number
    }, ExtArgs["result"]["clienteMenorConsumo"]>
    composites: {}
  }

  type ClienteMenorConsumoGetPayload<S extends boolean | null | undefined | ClienteMenorConsumoDefaultArgs> = $Result.GetResult<Prisma.$ClienteMenorConsumoPayload, S>

  type ClienteMenorConsumoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteMenorConsumoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteMenorConsumoCountAggregateInputType | true
    }

  export interface ClienteMenorConsumoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteMenorConsumo'], meta: { name: 'ClienteMenorConsumo' } }
    /**
     * Find zero or one ClienteMenorConsumo that matches the filter.
     * @param {ClienteMenorConsumoFindUniqueArgs} args - Arguments to find a ClienteMenorConsumo
     * @example
     * // Get one ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteMenorConsumoFindUniqueArgs>(args: SelectSubset<T, ClienteMenorConsumoFindUniqueArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClienteMenorConsumo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteMenorConsumoFindUniqueOrThrowArgs} args - Arguments to find a ClienteMenorConsumo
     * @example
     * // Get one ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteMenorConsumoFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteMenorConsumoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClienteMenorConsumo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoFindFirstArgs} args - Arguments to find a ClienteMenorConsumo
     * @example
     * // Get one ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteMenorConsumoFindFirstArgs>(args?: SelectSubset<T, ClienteMenorConsumoFindFirstArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClienteMenorConsumo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoFindFirstOrThrowArgs} args - Arguments to find a ClienteMenorConsumo
     * @example
     * // Get one ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteMenorConsumoFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteMenorConsumoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClienteMenorConsumos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteMenorConsumos
     * const clienteMenorConsumos = await prisma.clienteMenorConsumo.findMany()
     * 
     * // Get first 10 ClienteMenorConsumos
     * const clienteMenorConsumos = await prisma.clienteMenorConsumo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteMenorConsumoWithIdOnly = await prisma.clienteMenorConsumo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteMenorConsumoFindManyArgs>(args?: SelectSubset<T, ClienteMenorConsumoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClienteMenorConsumo.
     * @param {ClienteMenorConsumoCreateArgs} args - Arguments to create a ClienteMenorConsumo.
     * @example
     * // Create one ClienteMenorConsumo
     * const ClienteMenorConsumo = await prisma.clienteMenorConsumo.create({
     *   data: {
     *     // ... data to create a ClienteMenorConsumo
     *   }
     * })
     * 
     */
    create<T extends ClienteMenorConsumoCreateArgs>(args: SelectSubset<T, ClienteMenorConsumoCreateArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClienteMenorConsumos.
     * @param {ClienteMenorConsumoCreateManyArgs} args - Arguments to create many ClienteMenorConsumos.
     * @example
     * // Create many ClienteMenorConsumos
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteMenorConsumoCreateManyArgs>(args?: SelectSubset<T, ClienteMenorConsumoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteMenorConsumo.
     * @param {ClienteMenorConsumoDeleteArgs} args - Arguments to delete one ClienteMenorConsumo.
     * @example
     * // Delete one ClienteMenorConsumo
     * const ClienteMenorConsumo = await prisma.clienteMenorConsumo.delete({
     *   where: {
     *     // ... filter to delete one ClienteMenorConsumo
     *   }
     * })
     * 
     */
    delete<T extends ClienteMenorConsumoDeleteArgs>(args: SelectSubset<T, ClienteMenorConsumoDeleteArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClienteMenorConsumo.
     * @param {ClienteMenorConsumoUpdateArgs} args - Arguments to update one ClienteMenorConsumo.
     * @example
     * // Update one ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteMenorConsumoUpdateArgs>(args: SelectSubset<T, ClienteMenorConsumoUpdateArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClienteMenorConsumos.
     * @param {ClienteMenorConsumoDeleteManyArgs} args - Arguments to filter ClienteMenorConsumos to delete.
     * @example
     * // Delete a few ClienteMenorConsumos
     * const { count } = await prisma.clienteMenorConsumo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteMenorConsumoDeleteManyArgs>(args?: SelectSubset<T, ClienteMenorConsumoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteMenorConsumos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteMenorConsumos
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteMenorConsumoUpdateManyArgs>(args: SelectSubset<T, ClienteMenorConsumoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteMenorConsumo.
     * @param {ClienteMenorConsumoUpsertArgs} args - Arguments to update or create a ClienteMenorConsumo.
     * @example
     * // Update or create a ClienteMenorConsumo
     * const clienteMenorConsumo = await prisma.clienteMenorConsumo.upsert({
     *   create: {
     *     // ... data to create a ClienteMenorConsumo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteMenorConsumo we want to update
     *   }
     * })
     */
    upsert<T extends ClienteMenorConsumoUpsertArgs>(args: SelectSubset<T, ClienteMenorConsumoUpsertArgs<ExtArgs>>): Prisma__ClienteMenorConsumoClient<$Result.GetResult<Prisma.$ClienteMenorConsumoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClienteMenorConsumos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoCountArgs} args - Arguments to filter ClienteMenorConsumos to count.
     * @example
     * // Count the number of ClienteMenorConsumos
     * const count = await prisma.clienteMenorConsumo.count({
     *   where: {
     *     // ... the filter for the ClienteMenorConsumos we want to count
     *   }
     * })
    **/
    count<T extends ClienteMenorConsumoCountArgs>(
      args?: Subset<T, ClienteMenorConsumoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteMenorConsumoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteMenorConsumo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteMenorConsumoAggregateArgs>(args: Subset<T, ClienteMenorConsumoAggregateArgs>): Prisma.PrismaPromise<GetClienteMenorConsumoAggregateType<T>>

    /**
     * Group by ClienteMenorConsumo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteMenorConsumoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteMenorConsumoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteMenorConsumoGroupByArgs['orderBy'] }
        : { orderBy?: ClienteMenorConsumoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteMenorConsumoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteMenorConsumoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteMenorConsumo model
   */
  readonly fields: ClienteMenorConsumoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteMenorConsumo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteMenorConsumoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteMenorConsumo model
   */ 
  interface ClienteMenorConsumoFieldRefs {
    readonly id: FieldRef<"ClienteMenorConsumo", 'Int'>
    readonly nome: FieldRef<"ClienteMenorConsumo", 'String'>
    readonly cpf: FieldRef<"ClienteMenorConsumo", 'String'>
    readonly telefone: FieldRef<"ClienteMenorConsumo", 'String'>
    readonly valorConsumido: FieldRef<"ClienteMenorConsumo", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ClienteMenorConsumo findUnique
   */
  export type ClienteMenorConsumoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ClienteMenorConsumo to fetch.
     */
    where: ClienteMenorConsumoWhereUniqueInput
  }

  /**
   * ClienteMenorConsumo findUniqueOrThrow
   */
  export type ClienteMenorConsumoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ClienteMenorConsumo to fetch.
     */
    where: ClienteMenorConsumoWhereUniqueInput
  }

  /**
   * ClienteMenorConsumo findFirst
   */
  export type ClienteMenorConsumoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ClienteMenorConsumo to fetch.
     */
    where?: ClienteMenorConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteMenorConsumos to fetch.
     */
    orderBy?: ClienteMenorConsumoOrderByWithRelationInput | ClienteMenorConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteMenorConsumos.
     */
    cursor?: ClienteMenorConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteMenorConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteMenorConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteMenorConsumos.
     */
    distinct?: ClienteMenorConsumoScalarFieldEnum | ClienteMenorConsumoScalarFieldEnum[]
  }

  /**
   * ClienteMenorConsumo findFirstOrThrow
   */
  export type ClienteMenorConsumoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ClienteMenorConsumo to fetch.
     */
    where?: ClienteMenorConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteMenorConsumos to fetch.
     */
    orderBy?: ClienteMenorConsumoOrderByWithRelationInput | ClienteMenorConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteMenorConsumos.
     */
    cursor?: ClienteMenorConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteMenorConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteMenorConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteMenorConsumos.
     */
    distinct?: ClienteMenorConsumoScalarFieldEnum | ClienteMenorConsumoScalarFieldEnum[]
  }

  /**
   * ClienteMenorConsumo findMany
   */
  export type ClienteMenorConsumoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ClienteMenorConsumos to fetch.
     */
    where?: ClienteMenorConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteMenorConsumos to fetch.
     */
    orderBy?: ClienteMenorConsumoOrderByWithRelationInput | ClienteMenorConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteMenorConsumos.
     */
    cursor?: ClienteMenorConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteMenorConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteMenorConsumos.
     */
    skip?: number
    distinct?: ClienteMenorConsumoScalarFieldEnum | ClienteMenorConsumoScalarFieldEnum[]
  }

  /**
   * ClienteMenorConsumo create
   */
  export type ClienteMenorConsumoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * The data needed to create a ClienteMenorConsumo.
     */
    data: XOR<ClienteMenorConsumoCreateInput, ClienteMenorConsumoUncheckedCreateInput>
  }

  /**
   * ClienteMenorConsumo createMany
   */
  export type ClienteMenorConsumoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteMenorConsumos.
     */
    data: ClienteMenorConsumoCreateManyInput | ClienteMenorConsumoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteMenorConsumo update
   */
  export type ClienteMenorConsumoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * The data needed to update a ClienteMenorConsumo.
     */
    data: XOR<ClienteMenorConsumoUpdateInput, ClienteMenorConsumoUncheckedUpdateInput>
    /**
     * Choose, which ClienteMenorConsumo to update.
     */
    where: ClienteMenorConsumoWhereUniqueInput
  }

  /**
   * ClienteMenorConsumo updateMany
   */
  export type ClienteMenorConsumoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteMenorConsumos.
     */
    data: XOR<ClienteMenorConsumoUpdateManyMutationInput, ClienteMenorConsumoUncheckedUpdateManyInput>
    /**
     * Filter which ClienteMenorConsumos to update
     */
    where?: ClienteMenorConsumoWhereInput
  }

  /**
   * ClienteMenorConsumo upsert
   */
  export type ClienteMenorConsumoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * The filter to search for the ClienteMenorConsumo to update in case it exists.
     */
    where: ClienteMenorConsumoWhereUniqueInput
    /**
     * In case the ClienteMenorConsumo found by the `where` argument doesn't exist, create a new ClienteMenorConsumo with this data.
     */
    create: XOR<ClienteMenorConsumoCreateInput, ClienteMenorConsumoUncheckedCreateInput>
    /**
     * In case the ClienteMenorConsumo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteMenorConsumoUpdateInput, ClienteMenorConsumoUncheckedUpdateInput>
  }

  /**
   * ClienteMenorConsumo delete
   */
  export type ClienteMenorConsumoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
    /**
     * Filter which ClienteMenorConsumo to delete.
     */
    where: ClienteMenorConsumoWhereUniqueInput
  }

  /**
   * ClienteMenorConsumo deleteMany
   */
  export type ClienteMenorConsumoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteMenorConsumos to delete
     */
    where?: ClienteMenorConsumoWhereInput
  }

  /**
   * ClienteMenorConsumo without action
   */
  export type ClienteMenorConsumoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteMenorConsumo
     */
    select?: ClienteMenorConsumoSelect<ExtArgs> | null
  }


  /**
   * Model ClienteQtd
   */

  export type AggregateClienteQtd = {
    _count: ClienteQtdCountAggregateOutputType | null
    _avg: ClienteQtdAvgAggregateOutputType | null
    _sum: ClienteQtdSumAggregateOutputType | null
    _min: ClienteQtdMinAggregateOutputType | null
    _max: ClienteQtdMaxAggregateOutputType | null
  }

  export type ClienteQtdAvgAggregateOutputType = {
    id: number | null
    qtdConsumida: number | null
  }

  export type ClienteQtdSumAggregateOutputType = {
    id: number | null
    qtdConsumida: number | null
  }

  export type ClienteQtdMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    qtdConsumida: number | null
  }

  export type ClienteQtdMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    qtdConsumida: number | null
  }

  export type ClienteQtdCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    telefone: number
    qtdConsumida: number
    _all: number
  }


  export type ClienteQtdAvgAggregateInputType = {
    id?: true
    qtdConsumida?: true
  }

  export type ClienteQtdSumAggregateInputType = {
    id?: true
    qtdConsumida?: true
  }

  export type ClienteQtdMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    qtdConsumida?: true
  }

  export type ClienteQtdMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    qtdConsumida?: true
  }

  export type ClienteQtdCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    qtdConsumida?: true
    _all?: true
  }

  export type ClienteQtdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteQtd to aggregate.
     */
    where?: ClienteQtdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteQtds to fetch.
     */
    orderBy?: ClienteQtdOrderByWithRelationInput | ClienteQtdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteQtdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteQtds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteQtds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteQtds
    **/
    _count?: true | ClienteQtdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteQtdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteQtdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteQtdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteQtdMaxAggregateInputType
  }

  export type GetClienteQtdAggregateType<T extends ClienteQtdAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteQtd]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteQtd[P]>
      : GetScalarType<T[P], AggregateClienteQtd[P]>
  }




  export type ClienteQtdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteQtdWhereInput
    orderBy?: ClienteQtdOrderByWithAggregationInput | ClienteQtdOrderByWithAggregationInput[]
    by: ClienteQtdScalarFieldEnum[] | ClienteQtdScalarFieldEnum
    having?: ClienteQtdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteQtdCountAggregateInputType | true
    _avg?: ClienteQtdAvgAggregateInputType
    _sum?: ClienteQtdSumAggregateInputType
    _min?: ClienteQtdMinAggregateInputType
    _max?: ClienteQtdMaxAggregateInputType
  }

  export type ClienteQtdGroupByOutputType = {
    id: number
    nome: string
    cpf: string
    telefone: string | null
    qtdConsumida: number
    _count: ClienteQtdCountAggregateOutputType | null
    _avg: ClienteQtdAvgAggregateOutputType | null
    _sum: ClienteQtdSumAggregateOutputType | null
    _min: ClienteQtdMinAggregateOutputType | null
    _max: ClienteQtdMaxAggregateOutputType | null
  }

  type GetClienteQtdGroupByPayload<T extends ClienteQtdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteQtdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteQtdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteQtdGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteQtdGroupByOutputType[P]>
        }
      >
    >


  export type ClienteQtdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    qtdConsumida?: boolean
  }, ExtArgs["result"]["clienteQtd"]>


  export type ClienteQtdSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    qtdConsumida?: boolean
  }


  export type $ClienteQtdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteQtd"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cpf: string
      telefone: string | null
      qtdConsumida: number
    }, ExtArgs["result"]["clienteQtd"]>
    composites: {}
  }

  type ClienteQtdGetPayload<S extends boolean | null | undefined | ClienteQtdDefaultArgs> = $Result.GetResult<Prisma.$ClienteQtdPayload, S>

  type ClienteQtdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteQtdFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteQtdCountAggregateInputType | true
    }

  export interface ClienteQtdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteQtd'], meta: { name: 'ClienteQtd' } }
    /**
     * Find zero or one ClienteQtd that matches the filter.
     * @param {ClienteQtdFindUniqueArgs} args - Arguments to find a ClienteQtd
     * @example
     * // Get one ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteQtdFindUniqueArgs>(args: SelectSubset<T, ClienteQtdFindUniqueArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClienteQtd that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteQtdFindUniqueOrThrowArgs} args - Arguments to find a ClienteQtd
     * @example
     * // Get one ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteQtdFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteQtdFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClienteQtd that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdFindFirstArgs} args - Arguments to find a ClienteQtd
     * @example
     * // Get one ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteQtdFindFirstArgs>(args?: SelectSubset<T, ClienteQtdFindFirstArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClienteQtd that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdFindFirstOrThrowArgs} args - Arguments to find a ClienteQtd
     * @example
     * // Get one ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteQtdFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteQtdFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClienteQtds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteQtds
     * const clienteQtds = await prisma.clienteQtd.findMany()
     * 
     * // Get first 10 ClienteQtds
     * const clienteQtds = await prisma.clienteQtd.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteQtdWithIdOnly = await prisma.clienteQtd.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteQtdFindManyArgs>(args?: SelectSubset<T, ClienteQtdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClienteQtd.
     * @param {ClienteQtdCreateArgs} args - Arguments to create a ClienteQtd.
     * @example
     * // Create one ClienteQtd
     * const ClienteQtd = await prisma.clienteQtd.create({
     *   data: {
     *     // ... data to create a ClienteQtd
     *   }
     * })
     * 
     */
    create<T extends ClienteQtdCreateArgs>(args: SelectSubset<T, ClienteQtdCreateArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClienteQtds.
     * @param {ClienteQtdCreateManyArgs} args - Arguments to create many ClienteQtds.
     * @example
     * // Create many ClienteQtds
     * const clienteQtd = await prisma.clienteQtd.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteQtdCreateManyArgs>(args?: SelectSubset<T, ClienteQtdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteQtd.
     * @param {ClienteQtdDeleteArgs} args - Arguments to delete one ClienteQtd.
     * @example
     * // Delete one ClienteQtd
     * const ClienteQtd = await prisma.clienteQtd.delete({
     *   where: {
     *     // ... filter to delete one ClienteQtd
     *   }
     * })
     * 
     */
    delete<T extends ClienteQtdDeleteArgs>(args: SelectSubset<T, ClienteQtdDeleteArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClienteQtd.
     * @param {ClienteQtdUpdateArgs} args - Arguments to update one ClienteQtd.
     * @example
     * // Update one ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteQtdUpdateArgs>(args: SelectSubset<T, ClienteQtdUpdateArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClienteQtds.
     * @param {ClienteQtdDeleteManyArgs} args - Arguments to filter ClienteQtds to delete.
     * @example
     * // Delete a few ClienteQtds
     * const { count } = await prisma.clienteQtd.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteQtdDeleteManyArgs>(args?: SelectSubset<T, ClienteQtdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteQtds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteQtds
     * const clienteQtd = await prisma.clienteQtd.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteQtdUpdateManyArgs>(args: SelectSubset<T, ClienteQtdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteQtd.
     * @param {ClienteQtdUpsertArgs} args - Arguments to update or create a ClienteQtd.
     * @example
     * // Update or create a ClienteQtd
     * const clienteQtd = await prisma.clienteQtd.upsert({
     *   create: {
     *     // ... data to create a ClienteQtd
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteQtd we want to update
     *   }
     * })
     */
    upsert<T extends ClienteQtdUpsertArgs>(args: SelectSubset<T, ClienteQtdUpsertArgs<ExtArgs>>): Prisma__ClienteQtdClient<$Result.GetResult<Prisma.$ClienteQtdPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClienteQtds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdCountArgs} args - Arguments to filter ClienteQtds to count.
     * @example
     * // Count the number of ClienteQtds
     * const count = await prisma.clienteQtd.count({
     *   where: {
     *     // ... the filter for the ClienteQtds we want to count
     *   }
     * })
    **/
    count<T extends ClienteQtdCountArgs>(
      args?: Subset<T, ClienteQtdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteQtdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteQtd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteQtdAggregateArgs>(args: Subset<T, ClienteQtdAggregateArgs>): Prisma.PrismaPromise<GetClienteQtdAggregateType<T>>

    /**
     * Group by ClienteQtd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteQtdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteQtdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteQtdGroupByArgs['orderBy'] }
        : { orderBy?: ClienteQtdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteQtdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteQtdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteQtd model
   */
  readonly fields: ClienteQtdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteQtd.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteQtdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteQtd model
   */ 
  interface ClienteQtdFieldRefs {
    readonly id: FieldRef<"ClienteQtd", 'Int'>
    readonly nome: FieldRef<"ClienteQtd", 'String'>
    readonly cpf: FieldRef<"ClienteQtd", 'String'>
    readonly telefone: FieldRef<"ClienteQtd", 'String'>
    readonly qtdConsumida: FieldRef<"ClienteQtd", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClienteQtd findUnique
   */
  export type ClienteQtdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter, which ClienteQtd to fetch.
     */
    where: ClienteQtdWhereUniqueInput
  }

  /**
   * ClienteQtd findUniqueOrThrow
   */
  export type ClienteQtdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter, which ClienteQtd to fetch.
     */
    where: ClienteQtdWhereUniqueInput
  }

  /**
   * ClienteQtd findFirst
   */
  export type ClienteQtdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter, which ClienteQtd to fetch.
     */
    where?: ClienteQtdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteQtds to fetch.
     */
    orderBy?: ClienteQtdOrderByWithRelationInput | ClienteQtdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteQtds.
     */
    cursor?: ClienteQtdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteQtds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteQtds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteQtds.
     */
    distinct?: ClienteQtdScalarFieldEnum | ClienteQtdScalarFieldEnum[]
  }

  /**
   * ClienteQtd findFirstOrThrow
   */
  export type ClienteQtdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter, which ClienteQtd to fetch.
     */
    where?: ClienteQtdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteQtds to fetch.
     */
    orderBy?: ClienteQtdOrderByWithRelationInput | ClienteQtdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteQtds.
     */
    cursor?: ClienteQtdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteQtds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteQtds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteQtds.
     */
    distinct?: ClienteQtdScalarFieldEnum | ClienteQtdScalarFieldEnum[]
  }

  /**
   * ClienteQtd findMany
   */
  export type ClienteQtdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter, which ClienteQtds to fetch.
     */
    where?: ClienteQtdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteQtds to fetch.
     */
    orderBy?: ClienteQtdOrderByWithRelationInput | ClienteQtdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteQtds.
     */
    cursor?: ClienteQtdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteQtds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteQtds.
     */
    skip?: number
    distinct?: ClienteQtdScalarFieldEnum | ClienteQtdScalarFieldEnum[]
  }

  /**
   * ClienteQtd create
   */
  export type ClienteQtdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * The data needed to create a ClienteQtd.
     */
    data: XOR<ClienteQtdCreateInput, ClienteQtdUncheckedCreateInput>
  }

  /**
   * ClienteQtd createMany
   */
  export type ClienteQtdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteQtds.
     */
    data: ClienteQtdCreateManyInput | ClienteQtdCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteQtd update
   */
  export type ClienteQtdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * The data needed to update a ClienteQtd.
     */
    data: XOR<ClienteQtdUpdateInput, ClienteQtdUncheckedUpdateInput>
    /**
     * Choose, which ClienteQtd to update.
     */
    where: ClienteQtdWhereUniqueInput
  }

  /**
   * ClienteQtd updateMany
   */
  export type ClienteQtdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteQtds.
     */
    data: XOR<ClienteQtdUpdateManyMutationInput, ClienteQtdUncheckedUpdateManyInput>
    /**
     * Filter which ClienteQtds to update
     */
    where?: ClienteQtdWhereInput
  }

  /**
   * ClienteQtd upsert
   */
  export type ClienteQtdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * The filter to search for the ClienteQtd to update in case it exists.
     */
    where: ClienteQtdWhereUniqueInput
    /**
     * In case the ClienteQtd found by the `where` argument doesn't exist, create a new ClienteQtd with this data.
     */
    create: XOR<ClienteQtdCreateInput, ClienteQtdUncheckedCreateInput>
    /**
     * In case the ClienteQtd was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteQtdUpdateInput, ClienteQtdUncheckedUpdateInput>
  }

  /**
   * ClienteQtd delete
   */
  export type ClienteQtdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
    /**
     * Filter which ClienteQtd to delete.
     */
    where: ClienteQtdWhereUniqueInput
  }

  /**
   * ClienteQtd deleteMany
   */
  export type ClienteQtdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteQtds to delete
     */
    where?: ClienteQtdWhereInput
  }

  /**
   * ClienteQtd without action
   */
  export type ClienteQtdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteQtd
     */
    select?: ClienteQtdSelect<ExtArgs> | null
  }


  /**
   * Model ClienteValor
   */

  export type AggregateClienteValor = {
    _count: ClienteValorCountAggregateOutputType | null
    _avg: ClienteValorAvgAggregateOutputType | null
    _sum: ClienteValorSumAggregateOutputType | null
    _min: ClienteValorMinAggregateOutputType | null
    _max: ClienteValorMaxAggregateOutputType | null
  }

  export type ClienteValorAvgAggregateOutputType = {
    id: number | null
    valorConsumido: number | null
  }

  export type ClienteValorSumAggregateOutputType = {
    id: number | null
    valorConsumido: number | null
  }

  export type ClienteValorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    valorConsumido: number | null
  }

  export type ClienteValorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    telefone: string | null
    valorConsumido: number | null
  }

  export type ClienteValorCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    telefone: number
    valorConsumido: number
    _all: number
  }


  export type ClienteValorAvgAggregateInputType = {
    id?: true
    valorConsumido?: true
  }

  export type ClienteValorSumAggregateInputType = {
    id?: true
    valorConsumido?: true
  }

  export type ClienteValorMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
  }

  export type ClienteValorMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
  }

  export type ClienteValorCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    telefone?: true
    valorConsumido?: true
    _all?: true
  }

  export type ClienteValorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteValor to aggregate.
     */
    where?: ClienteValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteValors to fetch.
     */
    orderBy?: ClienteValorOrderByWithRelationInput | ClienteValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteValors
    **/
    _count?: true | ClienteValorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteValorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteValorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteValorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteValorMaxAggregateInputType
  }

  export type GetClienteValorAggregateType<T extends ClienteValorAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteValor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteValor[P]>
      : GetScalarType<T[P], AggregateClienteValor[P]>
  }




  export type ClienteValorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteValorWhereInput
    orderBy?: ClienteValorOrderByWithAggregationInput | ClienteValorOrderByWithAggregationInput[]
    by: ClienteValorScalarFieldEnum[] | ClienteValorScalarFieldEnum
    having?: ClienteValorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteValorCountAggregateInputType | true
    _avg?: ClienteValorAvgAggregateInputType
    _sum?: ClienteValorSumAggregateInputType
    _min?: ClienteValorMinAggregateInputType
    _max?: ClienteValorMaxAggregateInputType
  }

  export type ClienteValorGroupByOutputType = {
    id: number
    nome: string
    cpf: string
    telefone: string
    valorConsumido: number
    _count: ClienteValorCountAggregateOutputType | null
    _avg: ClienteValorAvgAggregateOutputType | null
    _sum: ClienteValorSumAggregateOutputType | null
    _min: ClienteValorMinAggregateOutputType | null
    _max: ClienteValorMaxAggregateOutputType | null
  }

  type GetClienteValorGroupByPayload<T extends ClienteValorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteValorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteValorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteValorGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteValorGroupByOutputType[P]>
        }
      >
    >


  export type ClienteValorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    valorConsumido?: boolean
  }, ExtArgs["result"]["clienteValor"]>


  export type ClienteValorSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    telefone?: boolean
    valorConsumido?: boolean
  }


  export type $ClienteValorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteValor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cpf: string
      telefone: string
      valorConsumido: number
    }, ExtArgs["result"]["clienteValor"]>
    composites: {}
  }

  type ClienteValorGetPayload<S extends boolean | null | undefined | ClienteValorDefaultArgs> = $Result.GetResult<Prisma.$ClienteValorPayload, S>

  type ClienteValorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteValorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteValorCountAggregateInputType | true
    }

  export interface ClienteValorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteValor'], meta: { name: 'ClienteValor' } }
    /**
     * Find zero or one ClienteValor that matches the filter.
     * @param {ClienteValorFindUniqueArgs} args - Arguments to find a ClienteValor
     * @example
     * // Get one ClienteValor
     * const clienteValor = await prisma.clienteValor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteValorFindUniqueArgs>(args: SelectSubset<T, ClienteValorFindUniqueArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClienteValor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteValorFindUniqueOrThrowArgs} args - Arguments to find a ClienteValor
     * @example
     * // Get one ClienteValor
     * const clienteValor = await prisma.clienteValor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteValorFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteValorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClienteValor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorFindFirstArgs} args - Arguments to find a ClienteValor
     * @example
     * // Get one ClienteValor
     * const clienteValor = await prisma.clienteValor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteValorFindFirstArgs>(args?: SelectSubset<T, ClienteValorFindFirstArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClienteValor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorFindFirstOrThrowArgs} args - Arguments to find a ClienteValor
     * @example
     * // Get one ClienteValor
     * const clienteValor = await prisma.clienteValor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteValorFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteValorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClienteValors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteValors
     * const clienteValors = await prisma.clienteValor.findMany()
     * 
     * // Get first 10 ClienteValors
     * const clienteValors = await prisma.clienteValor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteValorWithIdOnly = await prisma.clienteValor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteValorFindManyArgs>(args?: SelectSubset<T, ClienteValorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClienteValor.
     * @param {ClienteValorCreateArgs} args - Arguments to create a ClienteValor.
     * @example
     * // Create one ClienteValor
     * const ClienteValor = await prisma.clienteValor.create({
     *   data: {
     *     // ... data to create a ClienteValor
     *   }
     * })
     * 
     */
    create<T extends ClienteValorCreateArgs>(args: SelectSubset<T, ClienteValorCreateArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClienteValors.
     * @param {ClienteValorCreateManyArgs} args - Arguments to create many ClienteValors.
     * @example
     * // Create many ClienteValors
     * const clienteValor = await prisma.clienteValor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteValorCreateManyArgs>(args?: SelectSubset<T, ClienteValorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteValor.
     * @param {ClienteValorDeleteArgs} args - Arguments to delete one ClienteValor.
     * @example
     * // Delete one ClienteValor
     * const ClienteValor = await prisma.clienteValor.delete({
     *   where: {
     *     // ... filter to delete one ClienteValor
     *   }
     * })
     * 
     */
    delete<T extends ClienteValorDeleteArgs>(args: SelectSubset<T, ClienteValorDeleteArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClienteValor.
     * @param {ClienteValorUpdateArgs} args - Arguments to update one ClienteValor.
     * @example
     * // Update one ClienteValor
     * const clienteValor = await prisma.clienteValor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteValorUpdateArgs>(args: SelectSubset<T, ClienteValorUpdateArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClienteValors.
     * @param {ClienteValorDeleteManyArgs} args - Arguments to filter ClienteValors to delete.
     * @example
     * // Delete a few ClienteValors
     * const { count } = await prisma.clienteValor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteValorDeleteManyArgs>(args?: SelectSubset<T, ClienteValorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteValors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteValors
     * const clienteValor = await prisma.clienteValor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteValorUpdateManyArgs>(args: SelectSubset<T, ClienteValorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteValor.
     * @param {ClienteValorUpsertArgs} args - Arguments to update or create a ClienteValor.
     * @example
     * // Update or create a ClienteValor
     * const clienteValor = await prisma.clienteValor.upsert({
     *   create: {
     *     // ... data to create a ClienteValor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteValor we want to update
     *   }
     * })
     */
    upsert<T extends ClienteValorUpsertArgs>(args: SelectSubset<T, ClienteValorUpsertArgs<ExtArgs>>): Prisma__ClienteValorClient<$Result.GetResult<Prisma.$ClienteValorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClienteValors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorCountArgs} args - Arguments to filter ClienteValors to count.
     * @example
     * // Count the number of ClienteValors
     * const count = await prisma.clienteValor.count({
     *   where: {
     *     // ... the filter for the ClienteValors we want to count
     *   }
     * })
    **/
    count<T extends ClienteValorCountArgs>(
      args?: Subset<T, ClienteValorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteValorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteValor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteValorAggregateArgs>(args: Subset<T, ClienteValorAggregateArgs>): Prisma.PrismaPromise<GetClienteValorAggregateType<T>>

    /**
     * Group by ClienteValor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteValorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteValorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteValorGroupByArgs['orderBy'] }
        : { orderBy?: ClienteValorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteValorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteValorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteValor model
   */
  readonly fields: ClienteValorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteValor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteValorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteValor model
   */ 
  interface ClienteValorFieldRefs {
    readonly id: FieldRef<"ClienteValor", 'Int'>
    readonly nome: FieldRef<"ClienteValor", 'String'>
    readonly cpf: FieldRef<"ClienteValor", 'String'>
    readonly telefone: FieldRef<"ClienteValor", 'String'>
    readonly valorConsumido: FieldRef<"ClienteValor", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ClienteValor findUnique
   */
  export type ClienteValorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter, which ClienteValor to fetch.
     */
    where: ClienteValorWhereUniqueInput
  }

  /**
   * ClienteValor findUniqueOrThrow
   */
  export type ClienteValorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter, which ClienteValor to fetch.
     */
    where: ClienteValorWhereUniqueInput
  }

  /**
   * ClienteValor findFirst
   */
  export type ClienteValorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter, which ClienteValor to fetch.
     */
    where?: ClienteValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteValors to fetch.
     */
    orderBy?: ClienteValorOrderByWithRelationInput | ClienteValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteValors.
     */
    cursor?: ClienteValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteValors.
     */
    distinct?: ClienteValorScalarFieldEnum | ClienteValorScalarFieldEnum[]
  }

  /**
   * ClienteValor findFirstOrThrow
   */
  export type ClienteValorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter, which ClienteValor to fetch.
     */
    where?: ClienteValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteValors to fetch.
     */
    orderBy?: ClienteValorOrderByWithRelationInput | ClienteValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteValors.
     */
    cursor?: ClienteValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteValors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteValors.
     */
    distinct?: ClienteValorScalarFieldEnum | ClienteValorScalarFieldEnum[]
  }

  /**
   * ClienteValor findMany
   */
  export type ClienteValorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter, which ClienteValors to fetch.
     */
    where?: ClienteValorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteValors to fetch.
     */
    orderBy?: ClienteValorOrderByWithRelationInput | ClienteValorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteValors.
     */
    cursor?: ClienteValorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteValors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteValors.
     */
    skip?: number
    distinct?: ClienteValorScalarFieldEnum | ClienteValorScalarFieldEnum[]
  }

  /**
   * ClienteValor create
   */
  export type ClienteValorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * The data needed to create a ClienteValor.
     */
    data: XOR<ClienteValorCreateInput, ClienteValorUncheckedCreateInput>
  }

  /**
   * ClienteValor createMany
   */
  export type ClienteValorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteValors.
     */
    data: ClienteValorCreateManyInput | ClienteValorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteValor update
   */
  export type ClienteValorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * The data needed to update a ClienteValor.
     */
    data: XOR<ClienteValorUpdateInput, ClienteValorUncheckedUpdateInput>
    /**
     * Choose, which ClienteValor to update.
     */
    where: ClienteValorWhereUniqueInput
  }

  /**
   * ClienteValor updateMany
   */
  export type ClienteValorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteValors.
     */
    data: XOR<ClienteValorUpdateManyMutationInput, ClienteValorUncheckedUpdateManyInput>
    /**
     * Filter which ClienteValors to update
     */
    where?: ClienteValorWhereInput
  }

  /**
   * ClienteValor upsert
   */
  export type ClienteValorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * The filter to search for the ClienteValor to update in case it exists.
     */
    where: ClienteValorWhereUniqueInput
    /**
     * In case the ClienteValor found by the `where` argument doesn't exist, create a new ClienteValor with this data.
     */
    create: XOR<ClienteValorCreateInput, ClienteValorUncheckedCreateInput>
    /**
     * In case the ClienteValor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteValorUpdateInput, ClienteValorUncheckedUpdateInput>
  }

  /**
   * ClienteValor delete
   */
  export type ClienteValorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
    /**
     * Filter which ClienteValor to delete.
     */
    where: ClienteValorWhereUniqueInput
  }

  /**
   * ClienteValor deleteMany
   */
  export type ClienteValorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteValors to delete
     */
    where?: ClienteValorWhereInput
  }

  /**
   * ClienteValor without action
   */
  export type ClienteValorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteValor
     */
    select?: ClienteValorSelect<ExtArgs> | null
  }


  /**
   * Model ConsumoGenero
   */

  export type AggregateConsumoGenero = {
    _count: ConsumoGeneroCountAggregateOutputType | null
    _avg: ConsumoGeneroAvgAggregateOutputType | null
    _sum: ConsumoGeneroSumAggregateOutputType | null
    _min: ConsumoGeneroMinAggregateOutputType | null
    _max: ConsumoGeneroMaxAggregateOutputType | null
  }

  export type ConsumoGeneroAvgAggregateOutputType = {
    id: number | null
    valorTotal: number | null
  }

  export type ConsumoGeneroSumAggregateOutputType = {
    id: number | null
    valorTotal: number | null
  }

  export type ConsumoGeneroMinAggregateOutputType = {
    id: number | null
    clienteNome: string | null
    produtoServicoNome: string | null
    valorTotal: number | null
    genero: $Enums.Genero | null
  }

  export type ConsumoGeneroMaxAggregateOutputType = {
    id: number | null
    clienteNome: string | null
    produtoServicoNome: string | null
    valorTotal: number | null
    genero: $Enums.Genero | null
  }

  export type ConsumoGeneroCountAggregateOutputType = {
    id: number
    clienteNome: number
    produtoServicoNome: number
    valorTotal: number
    genero: number
    _all: number
  }


  export type ConsumoGeneroAvgAggregateInputType = {
    id?: true
    valorTotal?: true
  }

  export type ConsumoGeneroSumAggregateInputType = {
    id?: true
    valorTotal?: true
  }

  export type ConsumoGeneroMinAggregateInputType = {
    id?: true
    clienteNome?: true
    produtoServicoNome?: true
    valorTotal?: true
    genero?: true
  }

  export type ConsumoGeneroMaxAggregateInputType = {
    id?: true
    clienteNome?: true
    produtoServicoNome?: true
    valorTotal?: true
    genero?: true
  }

  export type ConsumoGeneroCountAggregateInputType = {
    id?: true
    clienteNome?: true
    produtoServicoNome?: true
    valorTotal?: true
    genero?: true
    _all?: true
  }

  export type ConsumoGeneroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumoGenero to aggregate.
     */
    where?: ConsumoGeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumoGeneros to fetch.
     */
    orderBy?: ConsumoGeneroOrderByWithRelationInput | ConsumoGeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumoGeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumoGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumoGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumoGeneros
    **/
    _count?: true | ConsumoGeneroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumoGeneroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumoGeneroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumoGeneroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumoGeneroMaxAggregateInputType
  }

  export type GetConsumoGeneroAggregateType<T extends ConsumoGeneroAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumoGenero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumoGenero[P]>
      : GetScalarType<T[P], AggregateConsumoGenero[P]>
  }




  export type ConsumoGeneroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumoGeneroWhereInput
    orderBy?: ConsumoGeneroOrderByWithAggregationInput | ConsumoGeneroOrderByWithAggregationInput[]
    by: ConsumoGeneroScalarFieldEnum[] | ConsumoGeneroScalarFieldEnum
    having?: ConsumoGeneroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumoGeneroCountAggregateInputType | true
    _avg?: ConsumoGeneroAvgAggregateInputType
    _sum?: ConsumoGeneroSumAggregateInputType
    _min?: ConsumoGeneroMinAggregateInputType
    _max?: ConsumoGeneroMaxAggregateInputType
  }

  export type ConsumoGeneroGroupByOutputType = {
    id: number
    clienteNome: string
    produtoServicoNome: string
    valorTotal: number
    genero: $Enums.Genero
    _count: ConsumoGeneroCountAggregateOutputType | null
    _avg: ConsumoGeneroAvgAggregateOutputType | null
    _sum: ConsumoGeneroSumAggregateOutputType | null
    _min: ConsumoGeneroMinAggregateOutputType | null
    _max: ConsumoGeneroMaxAggregateOutputType | null
  }

  type GetConsumoGeneroGroupByPayload<T extends ConsumoGeneroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumoGeneroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumoGeneroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumoGeneroGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumoGeneroGroupByOutputType[P]>
        }
      >
    >


  export type ConsumoGeneroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteNome?: boolean
    produtoServicoNome?: boolean
    valorTotal?: boolean
    genero?: boolean
  }, ExtArgs["result"]["consumoGenero"]>


  export type ConsumoGeneroSelectScalar = {
    id?: boolean
    clienteNome?: boolean
    produtoServicoNome?: boolean
    valorTotal?: boolean
    genero?: boolean
  }


  export type $ConsumoGeneroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsumoGenero"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteNome: string
      produtoServicoNome: string
      valorTotal: number
      genero: $Enums.Genero
    }, ExtArgs["result"]["consumoGenero"]>
    composites: {}
  }

  type ConsumoGeneroGetPayload<S extends boolean | null | undefined | ConsumoGeneroDefaultArgs> = $Result.GetResult<Prisma.$ConsumoGeneroPayload, S>

  type ConsumoGeneroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsumoGeneroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsumoGeneroCountAggregateInputType | true
    }

  export interface ConsumoGeneroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsumoGenero'], meta: { name: 'ConsumoGenero' } }
    /**
     * Find zero or one ConsumoGenero that matches the filter.
     * @param {ConsumoGeneroFindUniqueArgs} args - Arguments to find a ConsumoGenero
     * @example
     * // Get one ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumoGeneroFindUniqueArgs>(args: SelectSubset<T, ConsumoGeneroFindUniqueArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConsumoGenero that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsumoGeneroFindUniqueOrThrowArgs} args - Arguments to find a ConsumoGenero
     * @example
     * // Get one ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumoGeneroFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumoGeneroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConsumoGenero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroFindFirstArgs} args - Arguments to find a ConsumoGenero
     * @example
     * // Get one ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumoGeneroFindFirstArgs>(args?: SelectSubset<T, ConsumoGeneroFindFirstArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConsumoGenero that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroFindFirstOrThrowArgs} args - Arguments to find a ConsumoGenero
     * @example
     * // Get one ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumoGeneroFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumoGeneroFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConsumoGeneros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumoGeneros
     * const consumoGeneros = await prisma.consumoGenero.findMany()
     * 
     * // Get first 10 ConsumoGeneros
     * const consumoGeneros = await prisma.consumoGenero.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumoGeneroWithIdOnly = await prisma.consumoGenero.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumoGeneroFindManyArgs>(args?: SelectSubset<T, ConsumoGeneroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConsumoGenero.
     * @param {ConsumoGeneroCreateArgs} args - Arguments to create a ConsumoGenero.
     * @example
     * // Create one ConsumoGenero
     * const ConsumoGenero = await prisma.consumoGenero.create({
     *   data: {
     *     // ... data to create a ConsumoGenero
     *   }
     * })
     * 
     */
    create<T extends ConsumoGeneroCreateArgs>(args: SelectSubset<T, ConsumoGeneroCreateArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConsumoGeneros.
     * @param {ConsumoGeneroCreateManyArgs} args - Arguments to create many ConsumoGeneros.
     * @example
     * // Create many ConsumoGeneros
     * const consumoGenero = await prisma.consumoGenero.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumoGeneroCreateManyArgs>(args?: SelectSubset<T, ConsumoGeneroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConsumoGenero.
     * @param {ConsumoGeneroDeleteArgs} args - Arguments to delete one ConsumoGenero.
     * @example
     * // Delete one ConsumoGenero
     * const ConsumoGenero = await prisma.consumoGenero.delete({
     *   where: {
     *     // ... filter to delete one ConsumoGenero
     *   }
     * })
     * 
     */
    delete<T extends ConsumoGeneroDeleteArgs>(args: SelectSubset<T, ConsumoGeneroDeleteArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConsumoGenero.
     * @param {ConsumoGeneroUpdateArgs} args - Arguments to update one ConsumoGenero.
     * @example
     * // Update one ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumoGeneroUpdateArgs>(args: SelectSubset<T, ConsumoGeneroUpdateArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConsumoGeneros.
     * @param {ConsumoGeneroDeleteManyArgs} args - Arguments to filter ConsumoGeneros to delete.
     * @example
     * // Delete a few ConsumoGeneros
     * const { count } = await prisma.consumoGenero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumoGeneroDeleteManyArgs>(args?: SelectSubset<T, ConsumoGeneroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumoGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumoGeneros
     * const consumoGenero = await prisma.consumoGenero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumoGeneroUpdateManyArgs>(args: SelectSubset<T, ConsumoGeneroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsumoGenero.
     * @param {ConsumoGeneroUpsertArgs} args - Arguments to update or create a ConsumoGenero.
     * @example
     * // Update or create a ConsumoGenero
     * const consumoGenero = await prisma.consumoGenero.upsert({
     *   create: {
     *     // ... data to create a ConsumoGenero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumoGenero we want to update
     *   }
     * })
     */
    upsert<T extends ConsumoGeneroUpsertArgs>(args: SelectSubset<T, ConsumoGeneroUpsertArgs<ExtArgs>>): Prisma__ConsumoGeneroClient<$Result.GetResult<Prisma.$ConsumoGeneroPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConsumoGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroCountArgs} args - Arguments to filter ConsumoGeneros to count.
     * @example
     * // Count the number of ConsumoGeneros
     * const count = await prisma.consumoGenero.count({
     *   where: {
     *     // ... the filter for the ConsumoGeneros we want to count
     *   }
     * })
    **/
    count<T extends ConsumoGeneroCountArgs>(
      args?: Subset<T, ConsumoGeneroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumoGeneroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumoGenero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumoGeneroAggregateArgs>(args: Subset<T, ConsumoGeneroAggregateArgs>): Prisma.PrismaPromise<GetConsumoGeneroAggregateType<T>>

    /**
     * Group by ConsumoGenero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumoGeneroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumoGeneroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumoGeneroGroupByArgs['orderBy'] }
        : { orderBy?: ConsumoGeneroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumoGeneroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumoGeneroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsumoGenero model
   */
  readonly fields: ConsumoGeneroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumoGenero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumoGeneroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsumoGenero model
   */ 
  interface ConsumoGeneroFieldRefs {
    readonly id: FieldRef<"ConsumoGenero", 'Int'>
    readonly clienteNome: FieldRef<"ConsumoGenero", 'String'>
    readonly produtoServicoNome: FieldRef<"ConsumoGenero", 'String'>
    readonly valorTotal: FieldRef<"ConsumoGenero", 'Float'>
    readonly genero: FieldRef<"ConsumoGenero", 'Genero'>
  }
    

  // Custom InputTypes
  /**
   * ConsumoGenero findUnique
   */
  export type ConsumoGeneroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter, which ConsumoGenero to fetch.
     */
    where: ConsumoGeneroWhereUniqueInput
  }

  /**
   * ConsumoGenero findUniqueOrThrow
   */
  export type ConsumoGeneroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter, which ConsumoGenero to fetch.
     */
    where: ConsumoGeneroWhereUniqueInput
  }

  /**
   * ConsumoGenero findFirst
   */
  export type ConsumoGeneroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter, which ConsumoGenero to fetch.
     */
    where?: ConsumoGeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumoGeneros to fetch.
     */
    orderBy?: ConsumoGeneroOrderByWithRelationInput | ConsumoGeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumoGeneros.
     */
    cursor?: ConsumoGeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumoGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumoGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumoGeneros.
     */
    distinct?: ConsumoGeneroScalarFieldEnum | ConsumoGeneroScalarFieldEnum[]
  }

  /**
   * ConsumoGenero findFirstOrThrow
   */
  export type ConsumoGeneroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter, which ConsumoGenero to fetch.
     */
    where?: ConsumoGeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumoGeneros to fetch.
     */
    orderBy?: ConsumoGeneroOrderByWithRelationInput | ConsumoGeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumoGeneros.
     */
    cursor?: ConsumoGeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumoGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumoGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumoGeneros.
     */
    distinct?: ConsumoGeneroScalarFieldEnum | ConsumoGeneroScalarFieldEnum[]
  }

  /**
   * ConsumoGenero findMany
   */
  export type ConsumoGeneroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter, which ConsumoGeneros to fetch.
     */
    where?: ConsumoGeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumoGeneros to fetch.
     */
    orderBy?: ConsumoGeneroOrderByWithRelationInput | ConsumoGeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumoGeneros.
     */
    cursor?: ConsumoGeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumoGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumoGeneros.
     */
    skip?: number
    distinct?: ConsumoGeneroScalarFieldEnum | ConsumoGeneroScalarFieldEnum[]
  }

  /**
   * ConsumoGenero create
   */
  export type ConsumoGeneroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * The data needed to create a ConsumoGenero.
     */
    data: XOR<ConsumoGeneroCreateInput, ConsumoGeneroUncheckedCreateInput>
  }

  /**
   * ConsumoGenero createMany
   */
  export type ConsumoGeneroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsumoGeneros.
     */
    data: ConsumoGeneroCreateManyInput | ConsumoGeneroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsumoGenero update
   */
  export type ConsumoGeneroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * The data needed to update a ConsumoGenero.
     */
    data: XOR<ConsumoGeneroUpdateInput, ConsumoGeneroUncheckedUpdateInput>
    /**
     * Choose, which ConsumoGenero to update.
     */
    where: ConsumoGeneroWhereUniqueInput
  }

  /**
   * ConsumoGenero updateMany
   */
  export type ConsumoGeneroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsumoGeneros.
     */
    data: XOR<ConsumoGeneroUpdateManyMutationInput, ConsumoGeneroUncheckedUpdateManyInput>
    /**
     * Filter which ConsumoGeneros to update
     */
    where?: ConsumoGeneroWhereInput
  }

  /**
   * ConsumoGenero upsert
   */
  export type ConsumoGeneroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * The filter to search for the ConsumoGenero to update in case it exists.
     */
    where: ConsumoGeneroWhereUniqueInput
    /**
     * In case the ConsumoGenero found by the `where` argument doesn't exist, create a new ConsumoGenero with this data.
     */
    create: XOR<ConsumoGeneroCreateInput, ConsumoGeneroUncheckedCreateInput>
    /**
     * In case the ConsumoGenero was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumoGeneroUpdateInput, ConsumoGeneroUncheckedUpdateInput>
  }

  /**
   * ConsumoGenero delete
   */
  export type ConsumoGeneroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
    /**
     * Filter which ConsumoGenero to delete.
     */
    where: ConsumoGeneroWhereUniqueInput
  }

  /**
   * ConsumoGenero deleteMany
   */
  export type ConsumoGeneroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumoGeneros to delete
     */
    where?: ConsumoGeneroWhereInput
  }

  /**
   * ConsumoGenero without action
   */
  export type ConsumoGeneroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumoGenero
     */
    select?: ConsumoGeneroSelect<ExtArgs> | null
  }


  /**
   * Model ProdutoServicoConsumo
   */

  export type AggregateProdutoServicoConsumo = {
    _count: ProdutoServicoConsumoCountAggregateOutputType | null
    _avg: ProdutoServicoConsumoAvgAggregateOutputType | null
    _sum: ProdutoServicoConsumoSumAggregateOutputType | null
    _min: ProdutoServicoConsumoMinAggregateOutputType | null
    _max: ProdutoServicoConsumoMaxAggregateOutputType | null
  }

  export type ProdutoServicoConsumoAvgAggregateOutputType = {
    id: number | null
    valor: number | null
  }

  export type ProdutoServicoConsumoSumAggregateOutputType = {
    id: number | null
    valor: number | null
  }

  export type ProdutoServicoConsumoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    valor: number | null
  }

  export type ProdutoServicoConsumoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    valor: number | null
  }

  export type ProdutoServicoConsumoCountAggregateOutputType = {
    id: number
    nome: number
    valor: number
    _all: number
  }


  export type ProdutoServicoConsumoAvgAggregateInputType = {
    id?: true
    valor?: true
  }

  export type ProdutoServicoConsumoSumAggregateInputType = {
    id?: true
    valor?: true
  }

  export type ProdutoServicoConsumoMinAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
  }

  export type ProdutoServicoConsumoMaxAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
  }

  export type ProdutoServicoConsumoCountAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    _all?: true
  }

  export type ProdutoServicoConsumoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoServicoConsumo to aggregate.
     */
    where?: ProdutoServicoConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoServicoConsumos to fetch.
     */
    orderBy?: ProdutoServicoConsumoOrderByWithRelationInput | ProdutoServicoConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoServicoConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoServicoConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoServicoConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutoServicoConsumos
    **/
    _count?: true | ProdutoServicoConsumoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoServicoConsumoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoServicoConsumoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoServicoConsumoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoServicoConsumoMaxAggregateInputType
  }

  export type GetProdutoServicoConsumoAggregateType<T extends ProdutoServicoConsumoAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutoServicoConsumo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutoServicoConsumo[P]>
      : GetScalarType<T[P], AggregateProdutoServicoConsumo[P]>
  }




  export type ProdutoServicoConsumoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoServicoConsumoWhereInput
    orderBy?: ProdutoServicoConsumoOrderByWithAggregationInput | ProdutoServicoConsumoOrderByWithAggregationInput[]
    by: ProdutoServicoConsumoScalarFieldEnum[] | ProdutoServicoConsumoScalarFieldEnum
    having?: ProdutoServicoConsumoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoServicoConsumoCountAggregateInputType | true
    _avg?: ProdutoServicoConsumoAvgAggregateInputType
    _sum?: ProdutoServicoConsumoSumAggregateInputType
    _min?: ProdutoServicoConsumoMinAggregateInputType
    _max?: ProdutoServicoConsumoMaxAggregateInputType
  }

  export type ProdutoServicoConsumoGroupByOutputType = {
    id: number
    nome: string
    valor: number
    _count: ProdutoServicoConsumoCountAggregateOutputType | null
    _avg: ProdutoServicoConsumoAvgAggregateOutputType | null
    _sum: ProdutoServicoConsumoSumAggregateOutputType | null
    _min: ProdutoServicoConsumoMinAggregateOutputType | null
    _max: ProdutoServicoConsumoMaxAggregateOutputType | null
  }

  type GetProdutoServicoConsumoGroupByPayload<T extends ProdutoServicoConsumoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoServicoConsumoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoServicoConsumoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoServicoConsumoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoServicoConsumoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoServicoConsumoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
  }, ExtArgs["result"]["produtoServicoConsumo"]>


  export type ProdutoServicoConsumoSelectScalar = {
    id?: boolean
    nome?: boolean
    valor?: boolean
  }


  export type $ProdutoServicoConsumoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutoServicoConsumo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      valor: number
    }, ExtArgs["result"]["produtoServicoConsumo"]>
    composites: {}
  }

  type ProdutoServicoConsumoGetPayload<S extends boolean | null | undefined | ProdutoServicoConsumoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoServicoConsumoPayload, S>

  type ProdutoServicoConsumoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoServicoConsumoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoServicoConsumoCountAggregateInputType | true
    }

  export interface ProdutoServicoConsumoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutoServicoConsumo'], meta: { name: 'ProdutoServicoConsumo' } }
    /**
     * Find zero or one ProdutoServicoConsumo that matches the filter.
     * @param {ProdutoServicoConsumoFindUniqueArgs} args - Arguments to find a ProdutoServicoConsumo
     * @example
     * // Get one ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoServicoConsumoFindUniqueArgs>(args: SelectSubset<T, ProdutoServicoConsumoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutoServicoConsumo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoServicoConsumoFindUniqueOrThrowArgs} args - Arguments to find a ProdutoServicoConsumo
     * @example
     * // Get one ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoServicoConsumoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoServicoConsumoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutoServicoConsumo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoFindFirstArgs} args - Arguments to find a ProdutoServicoConsumo
     * @example
     * // Get one ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoServicoConsumoFindFirstArgs>(args?: SelectSubset<T, ProdutoServicoConsumoFindFirstArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutoServicoConsumo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoFindFirstOrThrowArgs} args - Arguments to find a ProdutoServicoConsumo
     * @example
     * // Get one ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoServicoConsumoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoServicoConsumoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutoServicoConsumos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutoServicoConsumos
     * const produtoServicoConsumos = await prisma.produtoServicoConsumo.findMany()
     * 
     * // Get first 10 ProdutoServicoConsumos
     * const produtoServicoConsumos = await prisma.produtoServicoConsumo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoServicoConsumoWithIdOnly = await prisma.produtoServicoConsumo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoServicoConsumoFindManyArgs>(args?: SelectSubset<T, ProdutoServicoConsumoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutoServicoConsumo.
     * @param {ProdutoServicoConsumoCreateArgs} args - Arguments to create a ProdutoServicoConsumo.
     * @example
     * // Create one ProdutoServicoConsumo
     * const ProdutoServicoConsumo = await prisma.produtoServicoConsumo.create({
     *   data: {
     *     // ... data to create a ProdutoServicoConsumo
     *   }
     * })
     * 
     */
    create<T extends ProdutoServicoConsumoCreateArgs>(args: SelectSubset<T, ProdutoServicoConsumoCreateArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutoServicoConsumos.
     * @param {ProdutoServicoConsumoCreateManyArgs} args - Arguments to create many ProdutoServicoConsumos.
     * @example
     * // Create many ProdutoServicoConsumos
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoServicoConsumoCreateManyArgs>(args?: SelectSubset<T, ProdutoServicoConsumoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdutoServicoConsumo.
     * @param {ProdutoServicoConsumoDeleteArgs} args - Arguments to delete one ProdutoServicoConsumo.
     * @example
     * // Delete one ProdutoServicoConsumo
     * const ProdutoServicoConsumo = await prisma.produtoServicoConsumo.delete({
     *   where: {
     *     // ... filter to delete one ProdutoServicoConsumo
     *   }
     * })
     * 
     */
    delete<T extends ProdutoServicoConsumoDeleteArgs>(args: SelectSubset<T, ProdutoServicoConsumoDeleteArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutoServicoConsumo.
     * @param {ProdutoServicoConsumoUpdateArgs} args - Arguments to update one ProdutoServicoConsumo.
     * @example
     * // Update one ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoServicoConsumoUpdateArgs>(args: SelectSubset<T, ProdutoServicoConsumoUpdateArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutoServicoConsumos.
     * @param {ProdutoServicoConsumoDeleteManyArgs} args - Arguments to filter ProdutoServicoConsumos to delete.
     * @example
     * // Delete a few ProdutoServicoConsumos
     * const { count } = await prisma.produtoServicoConsumo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoServicoConsumoDeleteManyArgs>(args?: SelectSubset<T, ProdutoServicoConsumoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutoServicoConsumos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutoServicoConsumos
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoServicoConsumoUpdateManyArgs>(args: SelectSubset<T, ProdutoServicoConsumoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutoServicoConsumo.
     * @param {ProdutoServicoConsumoUpsertArgs} args - Arguments to update or create a ProdutoServicoConsumo.
     * @example
     * // Update or create a ProdutoServicoConsumo
     * const produtoServicoConsumo = await prisma.produtoServicoConsumo.upsert({
     *   create: {
     *     // ... data to create a ProdutoServicoConsumo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutoServicoConsumo we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoServicoConsumoUpsertArgs>(args: SelectSubset<T, ProdutoServicoConsumoUpsertArgs<ExtArgs>>): Prisma__ProdutoServicoConsumoClient<$Result.GetResult<Prisma.$ProdutoServicoConsumoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutoServicoConsumos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoCountArgs} args - Arguments to filter ProdutoServicoConsumos to count.
     * @example
     * // Count the number of ProdutoServicoConsumos
     * const count = await prisma.produtoServicoConsumo.count({
     *   where: {
     *     // ... the filter for the ProdutoServicoConsumos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoServicoConsumoCountArgs>(
      args?: Subset<T, ProdutoServicoConsumoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoServicoConsumoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutoServicoConsumo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoServicoConsumoAggregateArgs>(args: Subset<T, ProdutoServicoConsumoAggregateArgs>): Prisma.PrismaPromise<GetProdutoServicoConsumoAggregateType<T>>

    /**
     * Group by ProdutoServicoConsumo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoServicoConsumoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoServicoConsumoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoServicoConsumoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoServicoConsumoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoServicoConsumoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoServicoConsumoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutoServicoConsumo model
   */
  readonly fields: ProdutoServicoConsumoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutoServicoConsumo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoServicoConsumoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutoServicoConsumo model
   */ 
  interface ProdutoServicoConsumoFieldRefs {
    readonly id: FieldRef<"ProdutoServicoConsumo", 'Int'>
    readonly nome: FieldRef<"ProdutoServicoConsumo", 'String'>
    readonly valor: FieldRef<"ProdutoServicoConsumo", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ProdutoServicoConsumo findUnique
   */
  export type ProdutoServicoConsumoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ProdutoServicoConsumo to fetch.
     */
    where: ProdutoServicoConsumoWhereUniqueInput
  }

  /**
   * ProdutoServicoConsumo findUniqueOrThrow
   */
  export type ProdutoServicoConsumoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ProdutoServicoConsumo to fetch.
     */
    where: ProdutoServicoConsumoWhereUniqueInput
  }

  /**
   * ProdutoServicoConsumo findFirst
   */
  export type ProdutoServicoConsumoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ProdutoServicoConsumo to fetch.
     */
    where?: ProdutoServicoConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoServicoConsumos to fetch.
     */
    orderBy?: ProdutoServicoConsumoOrderByWithRelationInput | ProdutoServicoConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoServicoConsumos.
     */
    cursor?: ProdutoServicoConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoServicoConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoServicoConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoServicoConsumos.
     */
    distinct?: ProdutoServicoConsumoScalarFieldEnum | ProdutoServicoConsumoScalarFieldEnum[]
  }

  /**
   * ProdutoServicoConsumo findFirstOrThrow
   */
  export type ProdutoServicoConsumoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ProdutoServicoConsumo to fetch.
     */
    where?: ProdutoServicoConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoServicoConsumos to fetch.
     */
    orderBy?: ProdutoServicoConsumoOrderByWithRelationInput | ProdutoServicoConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoServicoConsumos.
     */
    cursor?: ProdutoServicoConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoServicoConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoServicoConsumos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoServicoConsumos.
     */
    distinct?: ProdutoServicoConsumoScalarFieldEnum | ProdutoServicoConsumoScalarFieldEnum[]
  }

  /**
   * ProdutoServicoConsumo findMany
   */
  export type ProdutoServicoConsumoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter, which ProdutoServicoConsumos to fetch.
     */
    where?: ProdutoServicoConsumoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoServicoConsumos to fetch.
     */
    orderBy?: ProdutoServicoConsumoOrderByWithRelationInput | ProdutoServicoConsumoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutoServicoConsumos.
     */
    cursor?: ProdutoServicoConsumoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoServicoConsumos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoServicoConsumos.
     */
    skip?: number
    distinct?: ProdutoServicoConsumoScalarFieldEnum | ProdutoServicoConsumoScalarFieldEnum[]
  }

  /**
   * ProdutoServicoConsumo create
   */
  export type ProdutoServicoConsumoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * The data needed to create a ProdutoServicoConsumo.
     */
    data: XOR<ProdutoServicoConsumoCreateInput, ProdutoServicoConsumoUncheckedCreateInput>
  }

  /**
   * ProdutoServicoConsumo createMany
   */
  export type ProdutoServicoConsumoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutoServicoConsumos.
     */
    data: ProdutoServicoConsumoCreateManyInput | ProdutoServicoConsumoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdutoServicoConsumo update
   */
  export type ProdutoServicoConsumoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * The data needed to update a ProdutoServicoConsumo.
     */
    data: XOR<ProdutoServicoConsumoUpdateInput, ProdutoServicoConsumoUncheckedUpdateInput>
    /**
     * Choose, which ProdutoServicoConsumo to update.
     */
    where: ProdutoServicoConsumoWhereUniqueInput
  }

  /**
   * ProdutoServicoConsumo updateMany
   */
  export type ProdutoServicoConsumoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutoServicoConsumos.
     */
    data: XOR<ProdutoServicoConsumoUpdateManyMutationInput, ProdutoServicoConsumoUncheckedUpdateManyInput>
    /**
     * Filter which ProdutoServicoConsumos to update
     */
    where?: ProdutoServicoConsumoWhereInput
  }

  /**
   * ProdutoServicoConsumo upsert
   */
  export type ProdutoServicoConsumoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * The filter to search for the ProdutoServicoConsumo to update in case it exists.
     */
    where: ProdutoServicoConsumoWhereUniqueInput
    /**
     * In case the ProdutoServicoConsumo found by the `where` argument doesn't exist, create a new ProdutoServicoConsumo with this data.
     */
    create: XOR<ProdutoServicoConsumoCreateInput, ProdutoServicoConsumoUncheckedCreateInput>
    /**
     * In case the ProdutoServicoConsumo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoServicoConsumoUpdateInput, ProdutoServicoConsumoUncheckedUpdateInput>
  }

  /**
   * ProdutoServicoConsumo delete
   */
  export type ProdutoServicoConsumoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
    /**
     * Filter which ProdutoServicoConsumo to delete.
     */
    where: ProdutoServicoConsumoWhereUniqueInput
  }

  /**
   * ProdutoServicoConsumo deleteMany
   */
  export type ProdutoServicoConsumoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoServicoConsumos to delete
     */
    where?: ProdutoServicoConsumoWhereInput
  }

  /**
   * ProdutoServicoConsumo without action
   */
  export type ProdutoServicoConsumoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoServicoConsumo
     */
    select?: ProdutoServicoConsumoSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteMenorConsumoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone',
    valorConsumido: 'valorConsumido'
  };

  export type ClienteMenorConsumoScalarFieldEnum = (typeof ClienteMenorConsumoScalarFieldEnum)[keyof typeof ClienteMenorConsumoScalarFieldEnum]


  export const ClienteQtdScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone',
    qtdConsumida: 'qtdConsumida'
  };

  export type ClienteQtdScalarFieldEnum = (typeof ClienteQtdScalarFieldEnum)[keyof typeof ClienteQtdScalarFieldEnum]


  export const ClienteValorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone',
    valorConsumido: 'valorConsumido'
  };

  export type ClienteValorScalarFieldEnum = (typeof ClienteValorScalarFieldEnum)[keyof typeof ClienteValorScalarFieldEnum]


  export const ConsumoGeneroScalarFieldEnum: {
    id: 'id',
    clienteNome: 'clienteNome',
    produtoServicoNome: 'produtoServicoNome',
    valorTotal: 'valorTotal',
    genero: 'genero'
  };

  export type ConsumoGeneroScalarFieldEnum = (typeof ConsumoGeneroScalarFieldEnum)[keyof typeof ConsumoGeneroScalarFieldEnum]


  export const ProdutoServicoConsumoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    valor: 'valor'
  };

  export type ProdutoServicoConsumoScalarFieldEnum = (typeof ProdutoServicoConsumoScalarFieldEnum)[keyof typeof ProdutoServicoConsumoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ClienteMenorConsumoOrderByRelevanceFieldEnum: {
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone'
  };

  export type ClienteMenorConsumoOrderByRelevanceFieldEnum = (typeof ClienteMenorConsumoOrderByRelevanceFieldEnum)[keyof typeof ClienteMenorConsumoOrderByRelevanceFieldEnum]


  export const ClienteQtdOrderByRelevanceFieldEnum: {
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone'
  };

  export type ClienteQtdOrderByRelevanceFieldEnum = (typeof ClienteQtdOrderByRelevanceFieldEnum)[keyof typeof ClienteQtdOrderByRelevanceFieldEnum]


  export const ClienteValorOrderByRelevanceFieldEnum: {
    nome: 'nome',
    cpf: 'cpf',
    telefone: 'telefone'
  };

  export type ClienteValorOrderByRelevanceFieldEnum = (typeof ClienteValorOrderByRelevanceFieldEnum)[keyof typeof ClienteValorOrderByRelevanceFieldEnum]


  export const ConsumoGeneroOrderByRelevanceFieldEnum: {
    clienteNome: 'clienteNome',
    produtoServicoNome: 'produtoServicoNome'
  };

  export type ConsumoGeneroOrderByRelevanceFieldEnum = (typeof ConsumoGeneroOrderByRelevanceFieldEnum)[keyof typeof ConsumoGeneroOrderByRelevanceFieldEnum]


  export const ProdutoServicoConsumoOrderByRelevanceFieldEnum: {
    nome: 'nome'
  };

  export type ProdutoServicoConsumoOrderByRelevanceFieldEnum = (typeof ProdutoServicoConsumoOrderByRelevanceFieldEnum)[keyof typeof ProdutoServicoConsumoOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Genero'
   */
  export type EnumGeneroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Genero'>
    
  /**
   * Deep Input Types
   */


  export type ClienteMenorConsumoWhereInput = {
    AND?: ClienteMenorConsumoWhereInput | ClienteMenorConsumoWhereInput[]
    OR?: ClienteMenorConsumoWhereInput[]
    NOT?: ClienteMenorConsumoWhereInput | ClienteMenorConsumoWhereInput[]
    id?: IntFilter<"ClienteMenorConsumo"> | number
    nome?: StringFilter<"ClienteMenorConsumo"> | string
    cpf?: StringFilter<"ClienteMenorConsumo"> | string
    telefone?: StringNullableFilter<"ClienteMenorConsumo"> | string | null
    valorConsumido?: FloatFilter<"ClienteMenorConsumo"> | number
  }

  export type ClienteMenorConsumoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrderInput | SortOrder
    valorConsumido?: SortOrder
    _relevance?: ClienteMenorConsumoOrderByRelevanceInput
  }

  export type ClienteMenorConsumoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: ClienteMenorConsumoWhereInput | ClienteMenorConsumoWhereInput[]
    OR?: ClienteMenorConsumoWhereInput[]
    NOT?: ClienteMenorConsumoWhereInput | ClienteMenorConsumoWhereInput[]
    nome?: StringFilter<"ClienteMenorConsumo"> | string
    telefone?: StringNullableFilter<"ClienteMenorConsumo"> | string | null
    valorConsumido?: FloatFilter<"ClienteMenorConsumo"> | number
  }, "id" | "cpf">

  export type ClienteMenorConsumoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrderInput | SortOrder
    valorConsumido?: SortOrder
    _count?: ClienteMenorConsumoCountOrderByAggregateInput
    _avg?: ClienteMenorConsumoAvgOrderByAggregateInput
    _max?: ClienteMenorConsumoMaxOrderByAggregateInput
    _min?: ClienteMenorConsumoMinOrderByAggregateInput
    _sum?: ClienteMenorConsumoSumOrderByAggregateInput
  }

  export type ClienteMenorConsumoScalarWhereWithAggregatesInput = {
    AND?: ClienteMenorConsumoScalarWhereWithAggregatesInput | ClienteMenorConsumoScalarWhereWithAggregatesInput[]
    OR?: ClienteMenorConsumoScalarWhereWithAggregatesInput[]
    NOT?: ClienteMenorConsumoScalarWhereWithAggregatesInput | ClienteMenorConsumoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteMenorConsumo"> | number
    nome?: StringWithAggregatesFilter<"ClienteMenorConsumo"> | string
    cpf?: StringWithAggregatesFilter<"ClienteMenorConsumo"> | string
    telefone?: StringNullableWithAggregatesFilter<"ClienteMenorConsumo"> | string | null
    valorConsumido?: FloatWithAggregatesFilter<"ClienteMenorConsumo"> | number
  }

  export type ClienteQtdWhereInput = {
    AND?: ClienteQtdWhereInput | ClienteQtdWhereInput[]
    OR?: ClienteQtdWhereInput[]
    NOT?: ClienteQtdWhereInput | ClienteQtdWhereInput[]
    id?: IntFilter<"ClienteQtd"> | number
    nome?: StringFilter<"ClienteQtd"> | string
    cpf?: StringFilter<"ClienteQtd"> | string
    telefone?: StringNullableFilter<"ClienteQtd"> | string | null
    qtdConsumida?: IntFilter<"ClienteQtd"> | number
  }

  export type ClienteQtdOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrderInput | SortOrder
    qtdConsumida?: SortOrder
    _relevance?: ClienteQtdOrderByRelevanceInput
  }

  export type ClienteQtdWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: ClienteQtdWhereInput | ClienteQtdWhereInput[]
    OR?: ClienteQtdWhereInput[]
    NOT?: ClienteQtdWhereInput | ClienteQtdWhereInput[]
    nome?: StringFilter<"ClienteQtd"> | string
    telefone?: StringNullableFilter<"ClienteQtd"> | string | null
    qtdConsumida?: IntFilter<"ClienteQtd"> | number
  }, "id" | "cpf">

  export type ClienteQtdOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrderInput | SortOrder
    qtdConsumida?: SortOrder
    _count?: ClienteQtdCountOrderByAggregateInput
    _avg?: ClienteQtdAvgOrderByAggregateInput
    _max?: ClienteQtdMaxOrderByAggregateInput
    _min?: ClienteQtdMinOrderByAggregateInput
    _sum?: ClienteQtdSumOrderByAggregateInput
  }

  export type ClienteQtdScalarWhereWithAggregatesInput = {
    AND?: ClienteQtdScalarWhereWithAggregatesInput | ClienteQtdScalarWhereWithAggregatesInput[]
    OR?: ClienteQtdScalarWhereWithAggregatesInput[]
    NOT?: ClienteQtdScalarWhereWithAggregatesInput | ClienteQtdScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteQtd"> | number
    nome?: StringWithAggregatesFilter<"ClienteQtd"> | string
    cpf?: StringWithAggregatesFilter<"ClienteQtd"> | string
    telefone?: StringNullableWithAggregatesFilter<"ClienteQtd"> | string | null
    qtdConsumida?: IntWithAggregatesFilter<"ClienteQtd"> | number
  }

  export type ClienteValorWhereInput = {
    AND?: ClienteValorWhereInput | ClienteValorWhereInput[]
    OR?: ClienteValorWhereInput[]
    NOT?: ClienteValorWhereInput | ClienteValorWhereInput[]
    id?: IntFilter<"ClienteValor"> | number
    nome?: StringFilter<"ClienteValor"> | string
    cpf?: StringFilter<"ClienteValor"> | string
    telefone?: StringFilter<"ClienteValor"> | string
    valorConsumido?: FloatFilter<"ClienteValor"> | number
  }

  export type ClienteValorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
    _relevance?: ClienteValorOrderByRelevanceInput
  }

  export type ClienteValorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: ClienteValorWhereInput | ClienteValorWhereInput[]
    OR?: ClienteValorWhereInput[]
    NOT?: ClienteValorWhereInput | ClienteValorWhereInput[]
    nome?: StringFilter<"ClienteValor"> | string
    telefone?: StringFilter<"ClienteValor"> | string
    valorConsumido?: FloatFilter<"ClienteValor"> | number
  }, "id" | "cpf">

  export type ClienteValorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
    _count?: ClienteValorCountOrderByAggregateInput
    _avg?: ClienteValorAvgOrderByAggregateInput
    _max?: ClienteValorMaxOrderByAggregateInput
    _min?: ClienteValorMinOrderByAggregateInput
    _sum?: ClienteValorSumOrderByAggregateInput
  }

  export type ClienteValorScalarWhereWithAggregatesInput = {
    AND?: ClienteValorScalarWhereWithAggregatesInput | ClienteValorScalarWhereWithAggregatesInput[]
    OR?: ClienteValorScalarWhereWithAggregatesInput[]
    NOT?: ClienteValorScalarWhereWithAggregatesInput | ClienteValorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteValor"> | number
    nome?: StringWithAggregatesFilter<"ClienteValor"> | string
    cpf?: StringWithAggregatesFilter<"ClienteValor"> | string
    telefone?: StringWithAggregatesFilter<"ClienteValor"> | string
    valorConsumido?: FloatWithAggregatesFilter<"ClienteValor"> | number
  }

  export type ConsumoGeneroWhereInput = {
    AND?: ConsumoGeneroWhereInput | ConsumoGeneroWhereInput[]
    OR?: ConsumoGeneroWhereInput[]
    NOT?: ConsumoGeneroWhereInput | ConsumoGeneroWhereInput[]
    id?: IntFilter<"ConsumoGenero"> | number
    clienteNome?: StringFilter<"ConsumoGenero"> | string
    produtoServicoNome?: StringFilter<"ConsumoGenero"> | string
    valorTotal?: FloatFilter<"ConsumoGenero"> | number
    genero?: EnumGeneroFilter<"ConsumoGenero"> | $Enums.Genero
  }

  export type ConsumoGeneroOrderByWithRelationInput = {
    id?: SortOrder
    clienteNome?: SortOrder
    produtoServicoNome?: SortOrder
    valorTotal?: SortOrder
    genero?: SortOrder
    _relevance?: ConsumoGeneroOrderByRelevanceInput
  }

  export type ConsumoGeneroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsumoGeneroWhereInput | ConsumoGeneroWhereInput[]
    OR?: ConsumoGeneroWhereInput[]
    NOT?: ConsumoGeneroWhereInput | ConsumoGeneroWhereInput[]
    clienteNome?: StringFilter<"ConsumoGenero"> | string
    produtoServicoNome?: StringFilter<"ConsumoGenero"> | string
    valorTotal?: FloatFilter<"ConsumoGenero"> | number
    genero?: EnumGeneroFilter<"ConsumoGenero"> | $Enums.Genero
  }, "id">

  export type ConsumoGeneroOrderByWithAggregationInput = {
    id?: SortOrder
    clienteNome?: SortOrder
    produtoServicoNome?: SortOrder
    valorTotal?: SortOrder
    genero?: SortOrder
    _count?: ConsumoGeneroCountOrderByAggregateInput
    _avg?: ConsumoGeneroAvgOrderByAggregateInput
    _max?: ConsumoGeneroMaxOrderByAggregateInput
    _min?: ConsumoGeneroMinOrderByAggregateInput
    _sum?: ConsumoGeneroSumOrderByAggregateInput
  }

  export type ConsumoGeneroScalarWhereWithAggregatesInput = {
    AND?: ConsumoGeneroScalarWhereWithAggregatesInput | ConsumoGeneroScalarWhereWithAggregatesInput[]
    OR?: ConsumoGeneroScalarWhereWithAggregatesInput[]
    NOT?: ConsumoGeneroScalarWhereWithAggregatesInput | ConsumoGeneroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsumoGenero"> | number
    clienteNome?: StringWithAggregatesFilter<"ConsumoGenero"> | string
    produtoServicoNome?: StringWithAggregatesFilter<"ConsumoGenero"> | string
    valorTotal?: FloatWithAggregatesFilter<"ConsumoGenero"> | number
    genero?: EnumGeneroWithAggregatesFilter<"ConsumoGenero"> | $Enums.Genero
  }

  export type ProdutoServicoConsumoWhereInput = {
    AND?: ProdutoServicoConsumoWhereInput | ProdutoServicoConsumoWhereInput[]
    OR?: ProdutoServicoConsumoWhereInput[]
    NOT?: ProdutoServicoConsumoWhereInput | ProdutoServicoConsumoWhereInput[]
    id?: IntFilter<"ProdutoServicoConsumo"> | number
    nome?: StringFilter<"ProdutoServicoConsumo"> | string
    valor?: FloatFilter<"ProdutoServicoConsumo"> | number
  }

  export type ProdutoServicoConsumoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    _relevance?: ProdutoServicoConsumoOrderByRelevanceInput
  }

  export type ProdutoServicoConsumoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: ProdutoServicoConsumoWhereInput | ProdutoServicoConsumoWhereInput[]
    OR?: ProdutoServicoConsumoWhereInput[]
    NOT?: ProdutoServicoConsumoWhereInput | ProdutoServicoConsumoWhereInput[]
    valor?: FloatFilter<"ProdutoServicoConsumo"> | number
  }, "id" | "nome">

  export type ProdutoServicoConsumoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    _count?: ProdutoServicoConsumoCountOrderByAggregateInput
    _avg?: ProdutoServicoConsumoAvgOrderByAggregateInput
    _max?: ProdutoServicoConsumoMaxOrderByAggregateInput
    _min?: ProdutoServicoConsumoMinOrderByAggregateInput
    _sum?: ProdutoServicoConsumoSumOrderByAggregateInput
  }

  export type ProdutoServicoConsumoScalarWhereWithAggregatesInput = {
    AND?: ProdutoServicoConsumoScalarWhereWithAggregatesInput | ProdutoServicoConsumoScalarWhereWithAggregatesInput[]
    OR?: ProdutoServicoConsumoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoServicoConsumoScalarWhereWithAggregatesInput | ProdutoServicoConsumoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdutoServicoConsumo"> | number
    nome?: StringWithAggregatesFilter<"ProdutoServicoConsumo"> | string
    valor?: FloatWithAggregatesFilter<"ProdutoServicoConsumo"> | number
  }

  export type ClienteMenorConsumoCreateInput = {
    nome: string
    cpf: string
    telefone?: string | null
    valorConsumido?: number
  }

  export type ClienteMenorConsumoUncheckedCreateInput = {
    id?: number
    nome: string
    cpf: string
    telefone?: string | null
    valorConsumido?: number
  }

  export type ClienteMenorConsumoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteMenorConsumoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteMenorConsumoCreateManyInput = {
    id?: number
    nome: string
    cpf: string
    telefone?: string | null
    valorConsumido?: number
  }

  export type ClienteMenorConsumoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteMenorConsumoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteQtdCreateInput = {
    nome: string
    cpf: string
    telefone?: string | null
    qtdConsumida?: number
  }

  export type ClienteQtdUncheckedCreateInput = {
    id?: number
    nome: string
    cpf: string
    telefone?: string | null
    qtdConsumida?: number
  }

  export type ClienteQtdUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    qtdConsumida?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteQtdUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    qtdConsumida?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteQtdCreateManyInput = {
    id?: number
    nome: string
    cpf: string
    telefone?: string | null
    qtdConsumida?: number
  }

  export type ClienteQtdUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    qtdConsumida?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteQtdUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    qtdConsumida?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteValorCreateInput = {
    nome: string
    cpf: string
    telefone: string
    valorConsumido?: number
  }

  export type ClienteValorUncheckedCreateInput = {
    id?: number
    nome: string
    cpf: string
    telefone: string
    valorConsumido?: number
  }

  export type ClienteValorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteValorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteValorCreateManyInput = {
    id?: number
    nome: string
    cpf: string
    telefone: string
    valorConsumido?: number
  }

  export type ClienteValorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteValorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    valorConsumido?: FloatFieldUpdateOperationsInput | number
  }

  export type ConsumoGeneroCreateInput = {
    clienteNome: string
    produtoServicoNome: string
    valorTotal: number
    genero: $Enums.Genero
  }

  export type ConsumoGeneroUncheckedCreateInput = {
    id?: number
    clienteNome: string
    produtoServicoNome: string
    valorTotal: number
    genero: $Enums.Genero
  }

  export type ConsumoGeneroUpdateInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    produtoServicoNome?: StringFieldUpdateOperationsInput | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    genero?: EnumGeneroFieldUpdateOperationsInput | $Enums.Genero
  }

  export type ConsumoGeneroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    produtoServicoNome?: StringFieldUpdateOperationsInput | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    genero?: EnumGeneroFieldUpdateOperationsInput | $Enums.Genero
  }

  export type ConsumoGeneroCreateManyInput = {
    id?: number
    clienteNome: string
    produtoServicoNome: string
    valorTotal: number
    genero: $Enums.Genero
  }

  export type ConsumoGeneroUpdateManyMutationInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    produtoServicoNome?: StringFieldUpdateOperationsInput | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    genero?: EnumGeneroFieldUpdateOperationsInput | $Enums.Genero
  }

  export type ConsumoGeneroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    produtoServicoNome?: StringFieldUpdateOperationsInput | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    genero?: EnumGeneroFieldUpdateOperationsInput | $Enums.Genero
  }

  export type ProdutoServicoConsumoCreateInput = {
    nome: string
    valor: number
  }

  export type ProdutoServicoConsumoUncheckedCreateInput = {
    id?: number
    nome: string
    valor: number
  }

  export type ProdutoServicoConsumoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoServicoConsumoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoServicoConsumoCreateManyInput = {
    id?: number
    nome: string
    valor: number
  }

  export type ProdutoServicoConsumoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoServicoConsumoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClienteMenorConsumoOrderByRelevanceInput = {
    fields: ClienteMenorConsumoOrderByRelevanceFieldEnum | ClienteMenorConsumoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteMenorConsumoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteMenorConsumoAvgOrderByAggregateInput = {
    id?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteMenorConsumoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteMenorConsumoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteMenorConsumoSumOrderByAggregateInput = {
    id?: SortOrder
    valorConsumido?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClienteQtdOrderByRelevanceInput = {
    fields: ClienteQtdOrderByRelevanceFieldEnum | ClienteQtdOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteQtdCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    qtdConsumida?: SortOrder
  }

  export type ClienteQtdAvgOrderByAggregateInput = {
    id?: SortOrder
    qtdConsumida?: SortOrder
  }

  export type ClienteQtdMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    qtdConsumida?: SortOrder
  }

  export type ClienteQtdMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    qtdConsumida?: SortOrder
  }

  export type ClienteQtdSumOrderByAggregateInput = {
    id?: SortOrder
    qtdConsumida?: SortOrder
  }

  export type ClienteValorOrderByRelevanceInput = {
    fields: ClienteValorOrderByRelevanceFieldEnum | ClienteValorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteValorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteValorAvgOrderByAggregateInput = {
    id?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteValorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteValorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    telefone?: SortOrder
    valorConsumido?: SortOrder
  }

  export type ClienteValorSumOrderByAggregateInput = {
    id?: SortOrder
    valorConsumido?: SortOrder
  }

  export type EnumGeneroFilter<$PrismaModel = never> = {
    equals?: $Enums.Genero | EnumGeneroFieldRefInput<$PrismaModel>
    in?: $Enums.Genero[]
    notIn?: $Enums.Genero[]
    not?: NestedEnumGeneroFilter<$PrismaModel> | $Enums.Genero
  }

  export type ConsumoGeneroOrderByRelevanceInput = {
    fields: ConsumoGeneroOrderByRelevanceFieldEnum | ConsumoGeneroOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ConsumoGeneroCountOrderByAggregateInput = {
    id?: SortOrder
    clienteNome?: SortOrder
    produtoServicoNome?: SortOrder
    valorTotal?: SortOrder
    genero?: SortOrder
  }

  export type ConsumoGeneroAvgOrderByAggregateInput = {
    id?: SortOrder
    valorTotal?: SortOrder
  }

  export type ConsumoGeneroMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteNome?: SortOrder
    produtoServicoNome?: SortOrder
    valorTotal?: SortOrder
    genero?: SortOrder
  }

  export type ConsumoGeneroMinOrderByAggregateInput = {
    id?: SortOrder
    clienteNome?: SortOrder
    produtoServicoNome?: SortOrder
    valorTotal?: SortOrder
    genero?: SortOrder
  }

  export type ConsumoGeneroSumOrderByAggregateInput = {
    id?: SortOrder
    valorTotal?: SortOrder
  }

  export type EnumGeneroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Genero | EnumGeneroFieldRefInput<$PrismaModel>
    in?: $Enums.Genero[]
    notIn?: $Enums.Genero[]
    not?: NestedEnumGeneroWithAggregatesFilter<$PrismaModel> | $Enums.Genero
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGeneroFilter<$PrismaModel>
    _max?: NestedEnumGeneroFilter<$PrismaModel>
  }

  export type ProdutoServicoConsumoOrderByRelevanceInput = {
    fields: ProdutoServicoConsumoOrderByRelevanceFieldEnum | ProdutoServicoConsumoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProdutoServicoConsumoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoServicoConsumoAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoServicoConsumoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoServicoConsumoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoServicoConsumoSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGeneroFieldUpdateOperationsInput = {
    set?: $Enums.Genero
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumGeneroFilter<$PrismaModel = never> = {
    equals?: $Enums.Genero | EnumGeneroFieldRefInput<$PrismaModel>
    in?: $Enums.Genero[]
    notIn?: $Enums.Genero[]
    not?: NestedEnumGeneroFilter<$PrismaModel> | $Enums.Genero
  }

  export type NestedEnumGeneroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Genero | EnumGeneroFieldRefInput<$PrismaModel>
    in?: $Enums.Genero[]
    notIn?: $Enums.Genero[]
    not?: NestedEnumGeneroWithAggregatesFilter<$PrismaModel> | $Enums.Genero
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGeneroFilter<$PrismaModel>
    _max?: NestedEnumGeneroFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}